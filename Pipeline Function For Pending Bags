create or replace function  STOCK_REPORT( 
                p_page_id          in number,
                p_region_static_id in varchar2 )  return STOCK_DASHBOARD pipelined  is
                l_region_id   number;
                l_context     apex_exec.t_context;

            type t_col_index is table of pls_integer index by varchar2(255);
            l_col_index t_col_index;

                procedure get_column_indexes( p_columns wwv_flow_t_varchar2 ) is
                begin
                    for i in 1 .. p_columns.count loop
                        l_col_index( p_columns( i ) ) := apex_exec.get_column_position( 
                                                             p_context => l_context, 
                                                             p_column_name => p_columns( i ) );
            end loop;
        end get_column_indexes;
    begin
    -- 1. get the region ID of the Faceted Search region
    select region_id
      into l_region_id
      from apex_application_page_regions
     where application_id = v('APP_ID')
       and page_id        = p_page_id
       and static_id      = p_region_static_id;

    -- 2. Get a cursor (apex_exec.t_context) for the current region data
    l_context := apex_region.open_query_context(
                     p_page_id      => p_page_id,
                     p_region_id    => l_region_id );
 get_column_indexes(wwv_flow_t_varchar2('ITEM_ID','ITEM_NAME','PENDING_BAGS'));              

    while apex_exec.next_row( p_context => l_context ) loop
        pipe row( STOCK(
            apex_exec.get_number( p_context => l_context, p_column_idx => l_col_index( 'ITEM_ID' ) ),
                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'ITEM_NAME' ) ),
               apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'PENDING_BAGS' ) )--,
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'INSTRUMENT_AMOUNT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'ONLINE_AMOUNT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'ADJUSTMENT_AMOUNT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'HOLD_AMOUNT_ADJUSTMENT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'REFUND_AMOUNT_ADJUSTMENT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'INCENTIVE_PAYMENT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'INCENTIVE_ADJUSTMENT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'INCENTIVES_ADJUSTMENT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'TOTAL_INSENTIVES' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'TOTAL_REFUND' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'REFUND_ADJUSTMENT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'REFUND_PAYMENT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'LAND_FILE_ADJUSTMENT' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'DIRECT_REFUND' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'INCENTIVES_PAID' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'BATCH_NO' ) ),
--                      apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_col_index( 'DEDUCTION_VALUE' ) )
               
--                      
                         ));
    end loop;

    apex_exec.close( l_context );

    return;
exception
    when no_data_needed then
        apex_exec.close( l_context );
        return;
    when others then
        apex_exec.close( l_context );
        raise;
end STOCK_REPORT;
